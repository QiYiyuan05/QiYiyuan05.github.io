<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机组成原理笔记</title>
      <link href="/2024/09/18/co-01/"/>
      <url>/2024/09/18/co-01/</url>
      
        <content type="html"><![CDATA[<h1 id="二进制乘法"><a href="#二进制乘法" class="headerlink" title="二进制乘法"></a>二进制乘法</h1><h2 id="补码与真值的转换公式"><a href="#补码与真值的转换公式" class="headerlink" title="补码与真值的转换公式"></a>补码与真值的转换公式</h2><p>记X为有符号数，[X]<sub>补</sub> = $\overline{x_n x_{n-1} …x_0}$，则可以得到</p><p>X = $-x_n + \sum_{i = 0}^{n-1}x_i2^i$</p><h2 id="补码的乘法规则"><a href="#补码的乘法规则" class="headerlink" title="补码的乘法规则"></a>补码的乘法规则</h2><p>先考察两个补码乘法运算的例子</p><p>记[X]<sub>补</sub> = $\overline{x_n x_{n-1} … x_0}$，[Y]<sub>补</sub> =  $\overline{y_n y_{n-1} … y_0}$</p><p>可以验证，当X，Y均为正数或者无符号数时，有 [X * Y]<sub>补</sub> = [X]<sub>补</sub> * [Y]<sub>补</sub></p><p>若乘数为负数，负数的符号位参加运算，使得得到的结果出现偏差。因此在加数相加时还需要进行特判。</p><h2 id="Booth算法"><a href="#Booth算法" class="headerlink" title="Booth算法"></a>Booth算法</h2><h2 id="从竖式出发"><a href="#从竖式出发" class="headerlink" title="从竖式出发"></a>从竖式出发</h2><p>回忆算术中，竖式计算乘法的过程。</p><p>考虑X*Y，X * 1 = X，X * 0 = 0，乘数后得到的结果位移后相加得到积。所以考虑如何能通过变化使得某个乘数二进制表达形式里1的数量尽量少。首先考虑一个1，即 010<sub>(B)</sub> 1的数量不能再少了，不变。再考虑多个1连在一起的情况，如 01110<sub>(B)</sub> = 01000<sub>(B)</sub> - 00010<sub>(B)</sub>  。我们可以从高位开始研究这种字符串的特征（对当前位进行操作，操作类型和当前位和前位有关）。如下表。</p><table><thead><tr><th align="center">字符串特征</th><th align="center">操作</th><th align="center">一点补充</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">无</td><td align="center">低位为0，不需要加</td></tr><tr><td align="center">01</td><td align="center">加上X</td><td align="center">1序列的结尾0</td></tr><tr><td align="center">10</td><td align="center">减去X</td><td align="center">1序列的开始</td></tr><tr><td align="center">11</td><td align="center">无</td><td align="center">在1序列里，不需要特殊处理</td></tr></tbody></table><p>我们再考虑最低位，最低位前面没有位数，但是我们可以看成最低位是边界，所以可以补一个0辅助操作。</p><p>每次操作完之后都要进行移位。减去X可以看成加上X的相反数。即我们就可以化简乘法过程中的加法运算。但是请注意，计算相反数进行取反操作前要位数左对齐。</p><p>计算完之后结果应该为2n位，舍去溢出的2n高位。</p><h2 id="从补码与真值之间的关系出发"><a href="#从补码与真值之间的关系出发" class="headerlink" title="从补码与真值之间的关系出发"></a>从补码与真值之间的关系出发</h2><p>记X，Y为有符号数，[X]<sub>补</sub> = $\overline{x_n x_{n-1} …x_0}$，[Y]<sub>补</sub> = $\overline{y_n y_{n-1} …y_0}$，我们将前文提到的式子进行一定形式的变化。</p><p>$y=-y_n<em>2^{n} + \sum_{i = 0}^{n-1}y_i2^{n}=-y_n</em>2^n+((2-1)<em>y_0</em>2^{0}+(2-1)<em>y_1</em>2^{1}+…+(2-1)*y_{n-1}*2^{n-1})\=(y_{-1}-y_0)+(y_0-y_1)*2^1+…+(y_{n-1}-y_n)*2^{n},y^{-1}=0$</p><p>则$x<em>y=x</em>((y_{-1}-y_0)+(y_0-y_1)*2^1+…+(y_{n-1}-y_n)*2^{n}),y_{-1}=0$</p><p>由于是二进制，相邻两项的差的结果只能是-1，0，1，对应上表的减去X，无，加上X操作。真值和补码的关系对于有符号数，所以上述方法对有符号数也成立。</p>]]></content>
      
      
      <categories>
          
          <category> CO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算笔记</title>
      <link href="/2024/09/17/al-1/"/>
      <url>/2024/09/17/al-1/</url>
      
        <content type="html"><![CDATA[<h1 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h1><p>可以理解为无进位相加，因此满足交换律和结合律。</p><h2 id="抽象问题"><a href="#抽象问题" class="headerlink" title="抽象问题"></a>抽象问题</h2><h2 id="交换两个数"><a href="#交换两个数" class="headerlink" title="交换两个数"></a>交换两个数</h2><p>根据交换律和结合律可知，a = </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>    a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>       <span class="token comment">// 注意这种方法得两个变量有自己的内存空间</span>    <span class="token comment">// 下面的交换函数，当i == j时，使用异或运算进行交换会发生错误</span>    <span class="token comment">// 印象里大一debug初赛的某题考了这个知识点</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="位运算实现加减乘除"><a href="#位运算实现加减乘除" class="headerlink" title="位运算实现加减乘除"></a>位运算实现加减乘除</h1><p>有关题目：力扣 No.29 两数相除<del>（还没过捏）</del></p><p>感觉位运算相关知识在Logisim和计组可能会用到，先了解一下基础知识。</p><h2 id="1-加法"><a href="#1-加法" class="headerlink" title="1. 加法"></a>1. 加法</h2><p>以下是一位二进制相加的结果</p><table><thead><tr><th align="center">a</th><th align="center">b</th><th align="center">a+b</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">00</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">01</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">01</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">10</td></tr></tbody></table><p>可以观察到<code>a+b</code>低位为<code>a ^ b</code>的结果，高位为<code>a &amp; b</code>的结果。<code>a ^ b</code>是无进位加法的结果，<code>a &amp; b</code>是进位信息，进位信息左移一位即为进位结果。位运算实现加法，可以分解为无进位加法的结果加上进位结果，即<code>(a ^ b) + (a &amp; b &lt;&lt; 1)</code>。当进位信息为0时，即<code>(a &amp; b &lt;&lt; 1) == 0</code>时，加法结果即为无进位加法的结果，<code>(a ^ b) + (a &amp; b &lt;&lt; 1) = (a ^ b) ^ (a &amp; b &lt;&lt; 1)</code>。进位信息不为0时，迭代a，b的值再进行上述操作。每次操作1的数量一定不会增加，经过有限次操作后一定可以会得到进位信息为0的时候，得到结果。</p><p>以下是Java代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-减法"><a href="#2-减法" class="headerlink" title="2.减法"></a>2.减法</h2><p>减去被减数可以看成加上被减数的相反数，因此只需要写一个相反数转化的函数再调用上述加法代码即可实现减法功能。需要注意相反数数补码的转换。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// add()函数同上</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">neg</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">neg</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">~</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-乘法"><a href="#3-乘法" class="headerlink" title="3.乘法"></a>3.乘法</h2><p>根据乘法竖式的方法我们可以得到相关代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">// add()函数同上</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 考察b当前最右的状态</span>            ans <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        b <span class="token operator">&gt;&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-除法"><a href="#4-除法" class="headerlink" title="4.除法"></a>4.除法</h2><p>考虑 280 / 25 的结果。280 = 25 * 2<sup>3</sup> + 25 * 2<sup>1</sup> + 25 * 2<sup>0</sup> ，所以280 / 25 = 1011<sub>B</sub> = 11。</p><p>a / b 计算方法是从高位依次枚举2右上角的指数n，然后考虑被除数是否含有 b * 2<sup>n</sup>。如果含有则使被除数减去 b * 2<sup>n</sup>，否则被除数不变。然后让指数减少。直到指数为-1。剩下的被除数结果即为余数。</p><p>y右移可能会有溢出代码，因为是位移后与x比较大小，y右移等价于x左移相同的位数。</p><p>以下是示例代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 必须保证a和b都不是整数最小值，返回a除以b的结果，主要是因为整数最小值不能转化得到相反数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">neg</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">neg</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">:</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token function">minus</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>            ans <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token function">minus</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">^</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">neg</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token operator">:</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 以下为题解，讨论特殊情况的除法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MIN</span> <span class="token operator">=</span> <span class="token class-name">Integer<span class="token punctuation">.</span>Min_VALUE</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token constant">MIN</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token constant">MIN</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token constant">MIN</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token constant">MIN</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token constant">MIN</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token function">neg</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 题目要求</span>        <span class="token keyword">return</span> <span class="token class-name">Interger</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 最小的整数分情况讨论，要想办法让a没有这么小，就可以正常使用div()函数进行运算了</span>    a <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> b <span class="token operator">:</span> <span class="token function">neg</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> b <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">neg</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>加法：利用每一步无进位相加的结果 + 进位的结果不停计算，直到进位消失</p><p>减法：利用加法，和一个数字x相反数就是(~x)+1</p><p>乘法：回想小学时候怎么学的乘法，除此之外没别的了</p><p>除法：为了防止溢出，让被除数右移，而不是除数左移。从高位尝试到低位。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/09/11/hello-world/"/>
      <url>/2024/09/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
